              import java_cup.runtime.*;

              parser code {:
                  private Scanner scanner;
                  public parser(Scanner scanner) {
                      this.scanner = scanner;
                  }
             :};

              scan with {:
                  return scanner.next_token();
              :};

              terminal BOOL, __FUNC__, __LINE__, BREAK, BTOI, CLASS, CONTINUE, DEFINE, DOUBLE, DTOI, ELSE, FOR, IF, IMPORT, INT, ITOB,
              ITOD, NEW, NEWARRAY, NULL, PRINT, PRIVATE, PUBLIC,  READINTEGER, READLINE, RETURN, STRING,THIS, VOID, WHILE,
              EQ, NE, LE, LT, GT, GE, ASSIGN, PLUSASSIGN, MINUSASSIGN, MULTIPLYASSIGN, DIVIDEASSIGN,
              AND, OR, MOD, PLUS, MINUS, PROD, DIV, DOT, COMMA, NOT, SEMICOLON, LPAREN,
              RPAREN, LBRACK, RBRACK, LCURLY, RCURLY;

              terminal    String  IDENT;
              terminal    Integer INTLITERAL;
              terminal    Double  DOUBLELITERAL;
              terminal    String  STRINGLITERAL;
              terminal    Boolean TRUE, FALSE;

              non terminal        Program, Decl, Decl1, Macro, VariableDecl, Variable, Type, Brackets, FunctionDecl, Formals, VarComma1, ClassDecl,
                                  /* Ident1, */ Field01, Field, AccessMode, StmtBlock, VariableDecl0, Stmt0, Stmt,
                                  Expr01, IfStmt, WhileStmt, ForStmt, ReturnStmt, BreakStmt,
                                  ContinueStmt, PrintStmt, ExprComma1, Expr, Call, Actuals, LValue, Constant;

              precedence left LBRACK;
              precedence left COMMA;
              precedence left ASSIGN, PLUSASSIGN, MINUSASSIGN, MULTIPLYASSIGN, DIVIDEASSIGN ;
              precedence left OR;
              precedence left AND;
              precedence left EQ, NE;
              precedence left LT, LE, GT, GE;
              precedence left PLUS, MINUS;
              precedence left PROD, DIV, MOD;
              precedence left NOT;
              precedence left LPAREN, RPAREN, DOT;


              Program ::= Macro Program
                          | Decl Decl1
                          ;
              Decl1 ::= Decl Decl1
                          |
                          ;
              Macro ::= IMPORT STRING Constant
                          | DEFINE IDENT PROD
                          ;
              Decl ::= VariableDecl
                          | FunctionDecl
                          | ClassDecl
                          ;
              VariableDecl ::= Variable SEMICOLON
                          ;
              Variable ::= Type IDENT
                          ;
              Type ::= INT Brackets
                          | DOUBLE Brackets
                          | BOOL Brackets
                          | STRING Brackets
                          | IDENT Brackets
                          ;
              Brackets ::= LBRACK RBRACK Brackets
                          |
                          ;
              FunctionDecl ::= Type IDENT LPAREN Formals RPAREN StmtBlock
                          | VOID IDENT LPAREN Formals RPAREN StmtBlock
                          ;
              Formals ::= Variable VarComma1
                          |
                          ;
              VarComma1 ::= COMMA Variable VarComma1
                          |
                          ;
              ClassDecl ::= CLASS IDENT LCURLY Field01 RCURLY
                          ;
            /* Ident1 ::= IDENT Ident1
                          |
                          ; */
              Field01 ::= Field Field01
                          |
                          ;
              Field ::= AccessMode VariableDecl
                           | AccessMode FunctionDecl
                           ;
              AccessMode ::= PRIVATE
                           | PUBLIC
                           |
                           ;
              StmtBlock ::= LCURLY VariableDecl0 Stmt0 RCURLY
                          ;
              VariableDecl0 ::= VariableDecl0 VariableDecl
                          |
                          ;
              Stmt0 ::= Stmt Stmt0
                          |
                          ;
              Stmt ::= Expr01 SEMICOLON
                          | IfStmt
                          | WhileStmt
                          | ForStmt
                          | BreakStmt
                          | ContinueStmt
                          | ReturnStmt
                          | PrintStmt
                          | StmtBlock
                          ;
              Expr01 ::= Expr
                          |
                          ;
              IfStmt ::= IF LPAREN Expr RPAREN Stmt
                          |
                          IF LPAREN Expr RPAREN Stmt ELSE Stmt
                          ;
              WhileStmt ::= WHILE LPAREN Expr RPAREN Stmt
                          ;
              ForStmt ::= FOR LPAREN Expr01 SEMICOLON Expr SEMICOLON Expr01 RPAREN Stmt
                          ;
              ReturnStmt ::= RETURN Expr01 SEMICOLON
                          ;
              BreakStmt ::= BREAK SEMICOLON
                          ;
              ContinueStmt ::= CONTINUE SEMICOLON
                          ;
              PrintStmt ::= PRINT LPAREN ExprComma1 RPAREN SEMICOLON
                          ;
              ExprComma1 ::= Expr
                          | Expr COMMA ExprComma1
                          ;
              Expr ::=    LValue ASSIGN Expr
                          | LValue PLUSASSIGN Expr
                          | LValue MINUSASSIGN Expr
                          | LValue MULTIPLYASSIGN Expr
                          | LValue DIVIDEASSIGN Expr
                          | Constant
                          | LValue
                          | THIS
                          | Call
                          | LPAREN Expr RPAREN
                          | Expr PLUS Expr
                          | Expr MINUS Expr
                          | Expr PROD Expr
                          | Expr DIV Expr
                          | Expr MOD Expr
                          | MINUS Expr
                          | Expr LT Expr
                          | Expr LE Expr
                          | Expr GT Expr
                          | Expr GE Expr
                          | Expr EQ Expr
                          | Expr NE Expr
                          | Expr AND Expr
                          | Expr OR Expr
                          | NOT Expr
                          | READINTEGER LPAREN RPAREN
                          | READLINE LPAREN RPAREN
                          | NEW IDENT
                          | NEWARRAY LPAREN Expr COMMA Type RPAREN
                          | ITOD LPAREN Expr RPAREN
                          | DTOI LPAREN Expr RPAREN
                          | ITOB LPAREN Expr RPAREN
                          | BTOI LPAREN Expr RPAREN
                          | __FUNC__
                          | __LINE__
                          ;
              LValue ::= IDENT
                          | Expr DOT IDENT
                          | Expr LBRACK Expr RBRACK
                          ;
              Call ::= IDENT LPAREN Actuals RPAREN
                          | Expr DOT IDENT LPAREN Actuals RPAREN
                          ;
              Actuals ::= ExprComma1
                          |
                          ;
              Constant ::= INTLITERAL
                          | DOUBLELITERAL
                          | TRUE
                          | FALSE
                          | STRINGLITERAL
                          | NULL
                          ;