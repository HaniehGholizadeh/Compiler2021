// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Scanner.flex

package compiler;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
          "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
          "\11\0\1\1\1\2\1\0\1\1\1\3\23\0\1\4"+
                  "\1\5\2\0\1\6\1\7\1\10\1\11\1\12\1\13"+
                  "\1\14\1\15\1\16\1\17\1\20\1\21\11\22\1\0"+
                  "\1\23\1\24\1\25\1\26\2\0\1\27\3\30\1\31"+
                  "\1\30\2\32\1\33\2\32\1\34\1\32\1\35\1\32"+
                  "\1\36\1\32\1\37\5\32\1\40\2\32\1\41\1\42"+
                  "\1\43\1\0\1\44\1\0\1\45\1\46\1\47\1\50"+
                  "\1\51\1\52\1\53\1\54\1\55\1\32\1\56\1\57"+
                  "\1\60\1\61\1\62\1\63\1\32\1\64\1\65\1\66"+
                  "\1\67\1\70\1\71\1\40\1\72\1\32\1\73\1\74"+
                  "\1\75\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\2\0\1\1\2\2\1\3\1\4\1\5\1\1\1\6"+
                  "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16"+
                  "\1\17\1\20\1\21\1\22\4\23\1\24\1\25\1\1"+
                  "\15\23\1\26\1\1\1\27\1\30\1\31\1\32\1\33"+
                  "\1\34\1\35\1\0\1\36\1\37\1\0\1\2\1\40"+
                  "\1\41\1\0\1\42\1\43\1\44\3\23\1\0\13\23"+
                  "\1\45\15\23\1\46\1\47\1\50\1\51\1\52\1\53"+
                  "\1\54\3\0\1\16\3\23\2\0\12\23\1\55\1\23"+
                  "\1\56\1\23\1\57\11\23\1\0\1\2\1\0\1\41"+
                  "\3\23\2\0\1\60\1\23\1\61\4\23\1\62\1\63"+
                  "\2\23\1\64\1\65\1\66\4\23\1\67\1\70\1\71"+
                  "\2\23\1\72\2\23\2\0\1\73\1\74\3\23\1\75"+
                  "\5\23\1\76\3\23\2\0\1\23\1\77\1\100\1\101"+
                  "\1\23\1\102\1\103\1\104\3\23\2\0\1\23\1\105"+
                  "\1\106\1\23\1\107\1\110\1\111\1\112\2\23\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\76\0\174\0\174\0\272\0\370\0\174\0\174"+
                  "\0\u0136\0\174\0\174\0\u0174\0\u01b2\0\174\0\u01f0\0\174"+
                  "\0\u022e\0\u026c\0\u02aa\0\174\0\u02e8\0\u0326\0\u0364\0\u03a2"+
                  "\0\u03e0\0\u041e\0\u045c\0\174\0\174\0\u049a\0\u04d8\0\u0516"+
                  "\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706"+
                  "\0\u0744\0\u0782\0\u07c0\0\174\0\u07fe\0\174\0\u083c\0\174"+
                  "\0\u087a\0\174\0\174\0\174\0\u08b8\0\174\0\174\0\u08f6"+
                  "\0\u0934\0\174\0\u0972\0\u09b0\0\174\0\174\0\174\0\u09ee"+
                  "\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde"+
                  "\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u03a2\0\u0d90"+
                  "\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80"+
                  "\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\174\0\174\0\174\0\174"+
                  "\0\174\0\174\0\174\0\u10b6\0\u10f4\0\u1132\0\u09b0\0\u1170"+
                  "\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360"+
                  "\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u03a2\0\u1512"+
                  "\0\u03a2\0\u1550\0\u03a2\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686"+
                  "\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u10b6\0\u17fa\0\u17fa"+
                  "\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u03a2\0\u196e\0\u03a2"+
                  "\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u03a2\0\u03a2\0\u1aa4\0\u1ae2"+
                  "\0\u03a2\0\u03a2\0\u03a2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u03a2"+
                  "\0\u03a2\0\u03a2\0\u1c18\0\u1c56\0\u03a2\0\u1c94\0\u1cd2\0\u1d10"+
                  "\0\u1d4e\0\u03a2\0\u03a2\0\u1d8c\0\u1dca\0\u1e08\0\u03a2\0\u1e46"+
                  "\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u03a2\0\u1f7c\0\u1fba\0\u1ff8"+
                  "\0\u2036\0\u2074\0\u20b2\0\u03a2\0\u03a2\0\u03a2\0\u20f0\0\u03a2"+
                  "\0\u03a2\0\u03a2\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264"+
                  "\0\u03a2\0\u03a2\0\u22a2\0\u03a2\0\174\0\174\0\u03a2\0\u22e0"+
                  "\0\u231e\0\u03a2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\3"+
                  "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
                  "\1\22\1\23\1\24\1\25\1\26\1\27\6\30\1\31"+
                  "\1\32\1\33\1\30\1\34\1\3\1\35\1\36\1\30"+
                  "\1\37\1\40\1\41\1\42\1\43\2\30\1\44\3\30"+
                  "\1\45\1\30\1\46\1\47\1\50\1\51\1\30\1\52"+
                  "\1\53\1\30\1\54\1\55\1\56\2\57\2\3\1\57"+
                  "\1\60\34\57\1\61\33\57\100\0\1\4\120\0\1\62"+
                  "\57\0\1\63\113\0\1\64\71\0\2\65\2\0\1\66"+
                  "\71\0\2\65\2\0\1\67\63\0\1\70\4\0\1\71"+
                  "\4\0\1\72\67\0\1\73\1\0\2\23\15\0\1\74"+
                  "\54\0\1\73\1\0\2\23\100\0\1\75\75\0\1\76"+
                  "\75\0\1\77\71\0\2\30\4\0\12\30\3\0\27\30"+
                  "\24\0\2\30\4\0\12\30\3\0\5\30\1\100\21\30"+
                  "\24\0\2\30\4\0\12\30\3\0\20\30\1\101\6\30"+
                  "\24\0\2\30\4\0\12\30\3\0\5\30\1\102\21\30"+
                  "\47\0\1\103\52\0\2\30\4\0\12\30\3\0\16\30"+
                  "\1\104\1\30\1\105\1\30\1\106\4\30\24\0\2\30"+
                  "\4\0\12\30\3\0\13\30\1\107\2\30\1\110\10\30"+
                  "\24\0\2\30\4\0\12\30\3\0\5\30\1\111\10\30"+
                  "\1\112\3\30\1\113\4\30\24\0\2\30\4\0\12\30"+
                  "\3\0\13\30\1\114\13\30\24\0\2\30\4\0\12\30"+
                  "\3\0\1\30\1\115\14\30\1\116\10\30\24\0\2\30"+
                  "\4\0\12\30\3\0\6\30\1\117\5\30\1\120\1\121"+
                  "\4\30\1\122\4\30\24\0\2\30\4\0\12\30\3\0"+
                  "\5\30\1\123\15\30\1\124\3\30\24\0\2\30\4\0"+
                  "\12\30\3\0\20\30\1\125\2\30\1\126\3\30\24\0"+
                  "\2\30\4\0\12\30\3\0\5\30\1\127\21\30\24\0"+
                  "\2\30\4\0\12\30\3\0\22\30\1\130\4\30\24\0"+
                  "\2\30\4\0\12\30\3\0\10\30\1\131\7\30\1\132"+
                  "\6\30\24\0\2\30\4\0\12\30\3\0\16\30\1\133"+
                  "\10\30\24\0\2\30\4\0\12\30\3\0\10\30\1\134"+
                  "\16\30\77\0\1\135\1\0\2\57\2\0\1\57\1\0"+
                  "\34\57\1\0\33\57\5\0\1\136\2\0\1\137\10\0"+
                  "\1\140\24\0\1\141\3\0\1\142\13\0\1\143\26\0"+
                  "\1\73\1\0\2\65\53\0\13\144\1\145\62\144\2\71"+
                  "\1\4\1\5\72\71\21\0\2\73\6\0\1\146\17\0"+
                  "\1\146\45\0\2\147\4\0\3\147\13\0\6\147\44\0"+
                  "\2\30\4\0\12\30\3\0\25\30\1\150\1\30\24\0"+
                  "\2\30\4\0\12\30\3\0\11\30\1\151\15\30\24\0"+
                  "\2\30\4\0\12\30\3\0\1\30\1\152\25\30\55\0"+
                  "\1\153\4\0\1\154\37\0\2\30\4\0\12\30\3\0"+
                  "\16\30\1\155\10\30\24\0\2\30\4\0\12\30\3\0"+
                  "\5\30\1\156\21\30\24\0\2\30\4\0\12\30\3\0"+
                  "\16\30\1\157\10\30\24\0\2\30\4\0\12\30\3\0"+
                  "\1\30\1\160\25\30\24\0\2\30\4\0\12\30\3\0"+
                  "\15\30\1\161\11\30\24\0\2\30\4\0\12\30\3\0"+
                  "\6\30\1\162\20\30\24\0\2\30\4\0\12\30\3\0"+
                  "\23\30\1\163\3\30\24\0\2\30\4\0\12\30\3\0"+
                  "\16\30\1\164\10\30\24\0\2\30\4\0\12\30\3\0"+
                  "\21\30\1\165\5\30\24\0\2\30\4\0\12\30\3\0"+
                  "\13\30\1\166\13\30\24\0\2\30\4\0\12\30\3\0"+
                  "\20\30\1\167\6\30\24\0\2\30\4\0\12\30\3\0"+
                  "\17\30\1\170\7\30\24\0\2\30\4\0\12\30\3\0"+
                  "\22\30\1\171\4\30\24\0\2\30\4\0\12\30\3\0"+
                  "\16\30\1\172\10\30\24\0\2\30\4\0\12\30\3\0"+
                  "\25\30\1\173\1\30\24\0\2\30\4\0\12\30\3\0"+
                  "\13\30\1\174\13\30\24\0\2\30\4\0\12\30\3\0"+
                  "\11\30\1\175\15\30\24\0\2\30\4\0\12\30\3\0"+
                  "\2\30\1\176\24\30\24\0\2\30\4\0\12\30\3\0"+
                  "\22\30\1\177\4\30\24\0\2\30\4\0\12\30\3\0"+
                  "\20\30\1\200\6\30\24\0\2\30\4\0\12\30\3\0"+
                  "\11\30\1\201\15\30\24\0\2\30\4\0\12\30\3\0"+
                  "\23\30\1\202\3\30\24\0\2\30\4\0\12\30\3\0"+
                  "\11\30\1\203\15\30\24\0\2\30\4\0\12\30\3\0"+
                  "\11\30\1\204\15\30\3\0\13\144\1\205\75\144\1\205"+
                  "\4\144\1\206\55\144\14\0\1\207\1\0\1\207\2\0"+
                  "\2\210\74\0\2\30\4\0\1\211\11\30\3\0\27\30"+
                  "\24\0\2\30\4\0\12\30\3\0\15\30\1\212\11\30"+
                  "\24\0\2\30\4\0\12\30\3\0\4\30\1\213\22\30"+
                  "\72\0\1\214\63\0\1\215\41\0\2\30\4\0\12\30"+
                  "\3\0\13\30\1\216\13\30\24\0\2\30\4\0\12\30"+
                  "\3\0\1\30\1\217\25\30\24\0\2\30\4\0\12\30"+
                  "\3\0\11\30\1\220\15\30\24\0\2\30\4\0\12\30"+
                  "\3\0\21\30\1\221\5\30\24\0\2\30\4\0\12\30"+
                  "\3\0\22\30\1\222\4\30\24\0\2\30\4\0\12\30"+
                  "\3\0\11\30\1\223\15\30\24\0\2\30\4\0\12\30"+
                  "\3\0\2\30\1\224\24\30\24\0\2\30\4\0\12\30"+
                  "\3\0\11\30\1\225\15\30\24\0\2\30\4\0\12\30"+
                  "\3\0\5\30\1\226\21\30\24\0\2\30\4\0\12\30"+
                  "\3\0\21\30\1\227\5\30\24\0\2\30\4\0\12\30"+
                  "\3\0\16\30\1\230\10\30\24\0\2\30\4\0\12\30"+
                  "\3\0\2\30\1\231\1\30\1\232\22\30\24\0\2\30"+
                  "\4\0\12\30\3\0\13\30\1\233\13\30\24\0\2\30"+
                  "\4\0\12\30\3\0\24\30\1\234\2\30\24\0\2\30"+
                  "\4\0\12\30\3\0\13\30\1\235\13\30\24\0\2\30"+
                  "\4\0\12\30\3\0\23\30\1\236\3\30\24\0\2\30"+
                  "\4\0\12\30\3\0\11\30\1\237\15\30\24\0\2\30"+
                  "\4\0\12\30\3\0\21\30\1\240\5\30\24\0\2\30"+
                  "\4\0\12\30\3\0\5\30\1\241\21\30\24\0\2\30"+
                  "\4\0\12\30\3\0\4\30\1\242\22\30\24\0\2\30"+
                  "\4\0\12\30\3\0\13\30\1\243\13\30\3\0\13\144"+
                  "\1\205\4\144\1\4\55\144\21\0\2\210\74\0\2\30"+
                  "\4\0\12\30\3\0\20\30\1\244\6\30\24\0\2\30"+
                  "\4\0\12\30\3\0\22\30\1\245\4\30\24\0\2\30"+
                  "\4\0\4\30\1\246\1\247\4\30\3\0\27\30\64\0"+
                  "\1\250\75\0\1\251\35\0\2\30\4\0\12\30\3\0"+
                  "\12\30\1\252\14\30\24\0\2\30\4\0\12\30\3\0"+
                  "\21\30\1\253\5\30\24\0\2\30\4\0\12\30\3\0"+
                  "\11\30\1\254\15\30\24\0\2\30\4\0\12\30\3\0"+
                  "\15\30\1\255\11\30\24\0\2\30\4\0\12\30\3\0"+
                  "\13\30\1\256\13\30\24\0\2\30\4\0\12\30\3\0"+
                  "\5\30\1\257\21\30\24\0\2\30\4\0\12\30\3\0"+
                  "\20\30\1\260\6\30\24\0\2\30\4\0\12\30\3\0"+
                  "\1\30\1\261\25\30\24\0\2\30\4\0\12\30\3\0"+
                  "\11\30\1\262\15\30\24\0\2\30\4\0\12\30\3\0"+
                  "\20\30\1\263\6\30\24\0\2\30\4\0\12\30\3\0"+
                  "\15\30\1\264\11\30\24\0\2\30\4\0\12\30\3\0"+
                  "\5\30\1\265\21\30\24\0\2\30\4\0\12\30\3\0"+
                  "\20\30\1\266\6\30\24\0\2\30\4\0\12\30\3\0"+
                  "\15\30\1\267\11\30\24\0\2\30\4\0\12\30\3\0"+
                  "\11\30\1\270\15\30\52\0\1\271\77\0\1\272\45\0"+
                  "\2\30\4\0\12\30\3\0\15\30\1\273\11\30\24\0"+
                  "\2\30\4\0\12\30\3\0\5\30\1\274\21\30\24\0"+
                  "\2\30\4\0\12\30\3\0\5\30\1\275\21\30\24\0"+
                  "\2\30\4\0\12\30\3\0\22\30\1\276\4\30\24\0"+
                  "\2\30\4\0\12\30\3\0\22\30\1\277\4\30\24\0"+
                  "\2\30\4\0\12\30\3\0\3\30\1\300\23\30\24\0"+
                  "\2\30\4\0\12\30\3\0\15\30\1\301\11\30\24\0"+
                  "\2\30\4\0\12\30\3\0\7\30\1\302\17\30\24\0"+
                  "\2\30\4\0\12\30\3\0\1\30\1\303\25\30\24\0"+
                  "\2\30\4\0\12\30\3\0\22\30\1\304\4\30\24\0"+
                  "\2\30\4\0\12\30\3\0\15\30\1\305\11\30\47\0"+
                  "\1\306\75\0\1\307\52\0\2\30\4\0\12\30\3\0"+
                  "\23\30\1\310\3\30\24\0\2\30\4\0\12\30\3\0"+
                  "\5\30\1\311\21\30\24\0\2\30\4\0\12\30\3\0"+
                  "\26\30\1\312\24\0\2\30\4\0\12\30\3\0\5\30"+
                  "\1\313\21\30\24\0\2\30\4\0\12\30\3\0\5\30"+
                  "\1\314\21\30\47\0\1\315\75\0\1\316\52\0\2\30"+
                  "\4\0\12\30\3\0\5\30\1\317\21\30\24\0\2\30"+
                  "\4\0\12\30\3\0\7\30\1\320\17\30\24\0\2\30"+
                  "\4\0\12\30\3\0\5\30\1\321\21\30\24\0\2\30"+
                  "\4\0\12\30\3\0\20\30\1\322\6\30\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9052];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\2\0\2\11\2\1\2\11\1\1\2\11\2\1\1\11"+
                  "\1\1\1\11\3\1\1\11\7\1\2\11\16\1\1\11"+
                  "\1\1\1\11\1\1\1\11\1\1\3\11\1\0\2\11"+
                  "\1\0\1\1\1\11\1\1\1\0\3\11\3\1\1\0"+
                  "\31\1\7\11\3\0\4\1\2\0\30\1\1\0\1\1"+
                  "\1\0\4\1\2\0\32\1\2\0\17\1\2\0\13\1"+
                  "\2\0\5\1\2\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuilder string;
  private Symbol token(int tokenType) {
//        System.out.println(yytext());
    return new Symbol(tokenType);
  }
  private Symbol token(int tokenType, Object value) {
    return new Symbol(tokenType, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
              zzBuffer, 0,
              zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
              "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzCurrentPos = 0;
    zzMarkedPos = 0;
    zzStartRead = 0;
    zzEndRead = 0;
    zzFinalHighSurrogate = 0;
    yyline = 0;
    yycolumn = 0;
    yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;

      yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
          { /*System.out.print(yytext());*/
          }
          // fall through
          case 76: break;
          case 2:
          { /* ignore */
          }
          // fall through
          case 77: break;
          case 3:
          { return token(sym.NOT);
          }
          // fall through
          case 78: break;
          case 4:
          { string = new StringBuilder("\""); yybegin(STRING);
          }
          // fall through
          case 79: break;
          case 5:
          { return token(sym.MOD);
          }
          // fall through
          case 80: break;
          case 6:
          { return token(sym.LPAREN);
          }
          // fall through
          case 81: break;
          case 7:
          { return token(sym.RPAREN);
          }
          // fall through
          case 82: break;
          case 8:
          { return token(sym.PROD);
          }
          // fall through
          case 83: break;
          case 9:
          { return token(sym.PLUS);
          }
          // fall through
          case 84: break;
          case 10:
          { return token(sym.COMMA);
          }
          // fall through
          case 85: break;
          case 11:
          { return token(sym.MINUS);
          }
          // fall through
          case 86: break;
          case 12:
          { return token(sym.DOT);
          }
          // fall through
          case 87: break;
          case 13:
          { return token(sym.DIV);
          }
          // fall through
          case 88: break;
          case 14:
          { return token(sym.INTLITERAL);
          }
          // fall through
          case 89: break;
          case 15:
          { return token(sym.SEMICOLON);
          }
          // fall through
          case 90: break;
          case 16:
          { return token(sym.LT);
          }
          // fall through
          case 91: break;
          case 17:
          { return token(sym.ASSIGN);
          }
          // fall through
          case 92: break;
          case 18:
          { return token(sym.GT);
          }
          // fall through
          case 93: break;
          case 19:
          { return token(sym.IDENT);
          }
          // fall through
          case 94: break;
          case 20:
          { return token(sym.LBRACK);
          }
          // fall through
          case 95: break;
          case 21:
          { return token(sym.RBRACK);
          }
          // fall through
          case 96: break;
          case 22:
          { return token(sym.LCURLY);
          }
          // fall through
          case 97: break;
          case 23:
          { return token(sym.RCURLY);
          }
          // fall through
          case 98: break;
          case 24:
          { string.append(yytext());
          }
          // fall through
          case 99: break;
          case 25:
          { string.append("\"");
            yybegin(YYINITIAL);
            return token(sym.STRINGLITERAL, string);
          }
          // fall through
          case 100: break;
          case 26:
          { string.append('\\');
          }
          // fall through
          case 101: break;
          case 27:
          { return token(sym.NE);
          }
          // fall through
          case 102: break;
          case 28:
          { return token(sym.AND);
          }
          // fall through
          case 103: break;
          case 29:
          { return token(sym.MULTIPLYASSIGN);
          }
          // fall through
          case 104: break;
          case 30:
          { return token(sym.PLUSASSIGN);
          }
          // fall through
          case 105: break;
          case 31:
          { return token(sym.MINUSASSIGN);
          }
          // fall through
          case 106: break;
          case 32:
          { return token(sym.DIVIDEASSIGN);
          }
          // fall through
          case 107: break;
          case 33:
          { return token(sym.DOUBLELITERAL);
          }
          // fall through
          case 108: break;
          case 34:
          { return token(sym.LE);
          }
          // fall through
          case 109: break;
          case 35:
          { return token(sym.EQ);
          }
          // fall through
          case 110: break;
          case 36:
          { return token(sym.GE);
          }
          // fall through
          case 111: break;
          case 37:
          { return token(sym.IF);
          }
          // fall through
          case 112: break;
          case 38:
          { return token(sym.OR);
          }
          // fall through
          case 113: break;
          case 39:
          { string.append('\"');
          }
          // fall through
          case 114: break;
          case 40:
          { string.append('\'');
          }
          // fall through
          case 115: break;
          case 41:
          { string.append('\0');
          }
          // fall through
          case 116: break;
          case 42:
          { string.append('\b');
          }
          // fall through
          case 117: break;
          case 43:
          { string.append('\f');
          }
          // fall through
          case 118: break;
          case 44:
          { string.append('\t');
          }
          // fall through
          case 119: break;
          case 45:
          { return token(sym.FOR);
          }
          // fall through
          case 120: break;
          case 46:
          { return token(sym.INT);
          }
          // fall through
          case 121: break;
          case 47:
          { return token(sym.NEW);
          }
          // fall through
          case 122: break;
          case 48:
          { return token(sym.BOOL);
          }
          // fall through
          case 123: break;
          case 49:
          { return token(sym.BTOI);
          }
          // fall through
          case 124: break;
          case 50:
          { return token(sym.DTOI);
          }
          // fall through
          case 125: break;
          case 51:
          { return token(sym.ELSE);
          }
          // fall through
          case 126: break;
          case 52:
          { return token(sym.ITOB);
          }
          // fall through
          case 127: break;
          case 53:
          { return token(sym.ITOD);
          }
          // fall through
          case 128: break;
          case 54:
          { return token(sym.NULL);
          }
          // fall through
          case 129: break;
          case 55:
          { return token(sym.THIS);
          }
          // fall through
          case 130: break;
          case 56:
          { return token(sym.TRUE);
          }
          // fall through
          case 131: break;
          case 57:
          { return token(sym.VOID);
          }
          // fall through
          case 132: break;
          case 58:
          { return token(sym.PRINT);
          }
          // fall through
          case 133: break;
          case 59:
          { return token(sym.BREAK);
          }
          // fall through
          case 134: break;
          case 60:
          { return token(sym.CLASS);
          }
          // fall through
          case 135: break;
          case 61:
          { return token(sym.FALSE);
          }
          // fall through
          case 136: break;
          case 62:
          { return token(sym.WHILE);
          }
          // fall through
          case 137: break;
          case 63:
          { return token(sym.DEFINE);
          }
          // fall through
          case 138: break;
          case 64:
          { return token(sym.DOUBLE);
          }
          // fall through
          case 139: break;
          case 65:
          { return token(sym.IMPORT);
          }
          // fall through
          case 140: break;
          case 66:
          { return token(sym.PUBLIC);
          }
          // fall through
          case 141: break;
          case 67:
          { return token(sym.RETURN);
          }
          // fall through
          case 142: break;
          case 68:
          { return token(sym.STRING);
          }
          // fall through
          case 143: break;
          case 69:
          { return token(sym.PRIVATE);
          }
          // fall through
          case 144: break;
          case 70:
          { return token(sym.NEWARRAY);
          }
          // fall through
          case 145: break;
          case 71:
          { return token(sym.READLINE);
          }
          // fall through
          case 146: break;
          case 72:
          { return token(sym.__FUNC__);
          }
          // fall through
          case 147: break;
          case 73:
          { return token(sym.__LINE__);
          }
          // fall through
          case 148: break;
          case 74:
          { return token(sym.CONTINUE);
          }
          // fall through
          case 149: break;
          case 75:
          { return token(sym.READINTEGER);
          }
          // fall through
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
